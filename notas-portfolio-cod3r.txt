17/03/25
Anotações da semana COD3R-you tube, onde desenvolve um projeto FullStack com agentes de IA

https://github.com/portfolio-projetos-dev/portfoleo

Aula 04 - Domínio e Repositório
Normalmente compra um domínio na GoDaddy, na aula comprou um domínio por 17,34
comprei o meu por 17,16 (1º ano), após 80,31
meu nome de usuario: bogado.dev


Aula 07 - Core
cria a pasta core ( npm init -y )
cria o arquivo .prettierrc  na raiz do projeto e coloca as configurações:

{
  "printWidth": 100,
  "tabWidth": 4,
  "useTabs": true,
  "semi": true,
  "singleQuote": false
}

Aula 08 - Backend

Usará o nest no back
npm i -g @nestjs/cli

comandos úteis: nest --help
nest new api-portfolio

rodar a api:  saída na porta 3000
npm run start
npm run start:dev

nest start --help
package.json
"start": "nest start --entryFile api-portfolio/src/main.js",
"start:dev": "nest start --watch --entryFile api-portfolio/src/main.js",


Aula 09 - Banco de Dados
18/03
usando supabase, pediu para gerar a senha automaticamnte, fiz o mesmo
minha senha gerada: 88BbeKxeyVbBjtYX


Aula 10 - Prisma
prisma.io
Products > orm > quickstart

npm install prisma --save-dev

------------------------------------------
npx prisma init

saída do terminal:
Next steps:
1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
3. Run prisma db pull to turn your database schema into a Prisma schema.
4. Run prisma generate to generate the Prisma Client. You can then start querying your database.
5. Tip: Explore how you can extend the ORM with scalable connection pooling, global caching, and real-time database events. Read: https://pris.ly/cli/beyond-orm

More information in our documentation:
https://pris.ly/d/getting-starte
-----------------------------------------------

- ele comentou que usará o postgresql, pois o supabase é baseado no postgre sql
npx prisma init --datasource-provider sqlite
npx prisma init --datasource-provider pos

ao clicar em connect no supabase:
aba ORM:  tem as variáveis do .env.local
copiar e colar no código, no arquivo .env


Aula 11 - Tabela de Tecnologias

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tecnologia {
  id        Int @id @default(autoincrement())
  nome      String
  descricao String
  imagem    String
  destaque  Boolean @default(false)

  @@map("tecnologias")
}

npx prisma migrate dev (deve ser efetuado esse comando a cada mudança no BD)



Aula 12 - Popular a tabela de tecnologias
projeto  com o repositório exemplo: portfolio-projetos-dev (https://github.com/portfolio-projetos-dev)

4' 
importa os dados (arquivo csv) no supabase(na prática são as colunas da tabela tecnologias)  


Aula 13 - Criando conta n8n
n8n.io

criei a conta no n8n
Account name: bogado.app.n8n.cloud  (14 dias de acesso free)


==================== Backend =============================  20/03/25

Aula 20. Tabela de projetos

model Projeto {
  id          Int      @id @default(autoincrement())
  nome        String
  descricao   String
  imagens     String[]
  nivel       Int
  tipo        String
  destaque    Boolean  @default(false)
  repositorio String

  tecnologias Tecnologia[]

  @@map("projetos")
}

npx prisma migrate dev


Aula 23. Classe is

6'
aqui eu não precisei colocar, pois já funcionou

usar o console.log para testar o código ts no terminal
cria a pasta .vscode e dentro dela o arquivo settings.json, onde deixa somente a linha:

digita  code-runner.executorMap   (vai abrir várias opções, escolhe essa abaixo)
{
  "typescript": "npx tsx",  
}

-----------------------  22/03/25 ----------------------

Aula 28. Criando Módulos
excluiu alguns arquivos do projeto (app.service.ts, .prettierrc)

7' em backend
nest g  module db


Aula 29. Configurando Prisma

dentro da pasta api-portfolio/src/db:

comando:
nest g pr prisma.provider --no-spec --flat 

pr = abreviação de provider
prisma.provider = é o nome
--no-spec = para não criar o arquivo de teste
--flat = não cria uma subpasta


Aula 30. API Tecnologia
cria o controller, dentro da pasta api-portfolio/src/tecnologia:
nest g co tecnologia --no-spec --flat

8'
nest g pr tecnologia.provider --no-spec --flat


Aula 31. API do Projeto
nest g pr projeto.provider --no-spec --flat
nest g co projeto --no-spec --flat 


Aula 33. n8n supabase 
nessa aula, cria  a conexão com o supabase
 cica no + > Credential > Personal

poderia escolher tanto 'postgresql' quanto 'supabase api'
escolheu 'supabase api'

vai no supabase > connect > App Framework
pega a url e a chave key e cola no n8n

agora pode criar um novo work flow para o agente de ia responder através da base de dados


=============  Módulo 03 - Deploy & Agente de IA ===============

Aula 37. Fluxo de Teste com n8n

loguei com o google em
https://platform.openai.com/api-keys

16'
Adiciona a memória ao modelo de IA, faz isso através od 'session Id'

Aula 38. Assistente pessoal
4'
prompt para o agente de IA:

Você é o assistente pessoal dentro do portfólio do dev Bogado. Estou aberto para trabalho e contratação por empresas. É possível acessar todos os projetos do portfólio pela tool Projetos e todas as tecnologias que eu tenho experiência pela tool Tecnologias. Caso você não conheça a resposta, pode solicitar o telefone com whatsapp para que o Leonardo entre em contato posteriormente. Perguntas não relacinadas ao escopo do trabalho (projetos e tecnologias), podem ser educadamente negadas, caso queira poderá usar humor nessas negativas.

11'
respond to webhook

13' 20
coloca o fluxo como active
retira da url de teste e coloca na de produção (agora não precisa mais ficar pedindo para 'escutar')


Aula 39. Criando conta Fly.io

comentou rapidamente sobre o fly.io , cuso de 6,5 dólares mensais

aqui usará o fly.io
entreicom a conta bogado.dev

instalar as ferramentas:
https://fly.io/docs/flyctl/install/

curl -L https://fly.io/install.sh | sh

comando que mostra a ajuda:
/home/marcelobc/.fly/bin/flyctl --help

teste de start da app, após criar o arquivo Dockerfile
/home/marcelobc/.fly/bin/flyctl launch --no-deploy


escolhe y, pois do contrário iria criar um novo BD, mas já temos o BD na aplicação


Aula 41. Preparando o Deploy

na aplicação do fly.io, clica em Secrets (menu lateral), ali que que irá linkar com as variáveis do arquivo .env.sample do projeto ( DATABASE_URL=   DIRECT_URL= )

=================  23-03-25  ========================

Aula 42. Deploy-Fly.io
comando para fazer o deploy do back no fly.io:
fly deploy

tive que usar o comando: /home/marcelobc/.fly/bin/fly deploy


Aula 44. Configurando DNS #01
na aba certificates, acrescenta uma url (pega a do godaddy)

em godaddy foi em : https://dcc.godaddy.com/control/portfolio/projetos.work/settings?ventureId=d61c04ce-134f-4fbd-ab6d-131b536667c5&homecoming=true&referrer=vh-quicklink&itc=mya_vh_buildwebsite_dashboard

no certificates, coloca o endereço: api.projetos.work
pega o cname do fly.io e coloca no godaddy(adiciona um registro), coloca a chave e o valor

tipo: cname      Nome: chave     Valor: valor

Adiciona mais 2 registros, tipo A e tipo AAAA



-------------->>>  Módulo Frontend
Aula 47. Criação do frontend

na raiz do projeto:
npx create-next-app frontend

npm init -y  (para que com 1 único comando rode o front e o back, pois esse comando cria o package.json)


Aula 60
Mexe no arquivo next.config.ts
images: {
		remotePatterns: [
			{
				protocol: "https",
				hostname: "**",
			},
		],
	},
	
	
Aula 61. Carousel(shadcn)
Mostra um site interessante de componentes:
ui.aceternity.com	

Mas usará o shadcn
na pasta frontend:
npx shadcn@latest init
escolheu a cor Zinc  (cinza)

pediu para forçar as dependências para serem compatíveis com o React 19

após isso cria a pasta lib dentro de frontend

instala o componente do carousel
npx shadcn@latest add carousel

agora aparece a pasta ui, com os componentes criados


Aula 68. Conteúdo do Markdown
instala a dependência react-markdown
npm i react-markdown rehype-raw remark-gfm



Aula 76. Adicionar Popover
npx shadcn@latest add popover



Aula 77. Janela Chat #01
instala a biblioteca de ícones (tabler icons react)
npm i @tabler/icons-react


Aula 83. Correções no Build

ver se a aplicação está compilando, antes de fazer o deploy. Deixar a aplicação rodando e 

digitar no frontend
npm run build


Aula 84. Deploy #01
Tem que logar na conta vercel


Aula 85. Deploy #02



































